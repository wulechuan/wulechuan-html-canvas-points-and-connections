{"version":3,"sources":["sample-1/index.js"],"names":["buildWhatWeWant","window","wulechuanCanvasPointsAndConnections","draw","shoudSlowDownForTesting","drawnFramesCount","controller","drawFrame","Date","getTime","requestAnimationFrame","particleCounts","canvas","document","querySelector","maxDistanceToMakeConnection","lineWidthDrawingThreshold","pointsCount","thickestLineWidth","pointColorRGB","lineColorRGB","generateOnePoint","point","centerX","width","centerY","height","distributionRadius","Math","min","r","random","theta","PI","x","sin","y","cos","coreX","coreY","updateOnePointOnIteration","vmin","vmax","vx","vy","hasOwnProperty","distToCoreX","distToCoreY","forceX","abs","forceRatioOverDistanceX","forceY","forceRatioOverDistanceY","addEventListener","updateCanvasPositionAndSize"],"mappings":"CAAA,SAAWA,GACVA,EAAgBC,OAAOC,sCACrB,SAAyBA,GAiB3B,SAASC,IACJC,GAA2BC,EAAiB,IAGhDC,EAAWC,WAAU,IAAIC,MAAOC,UAAY,KAC5CC,sBAAsBP,GACtBE,KAtBD,IAAID,GAA0B,EAE1BO,EAAiB,GACjBP,IACS,EACZO,EAAiB,GAUlB,IAAIN,EAAmB,EAYnBO,EAASC,SAASC,cAAc,gBAOhCR,EAAa,IAAIJ,GACpBU,OAAQA,EACRG,4BAA6B,GAC7BC,0BAA2B,IAC3BC,YAAaN,EACbO,kBAAmB,EACnBC,cAAe,cACfC,aAAc,eAGdC,iBAID,SAAuCC,GACtC,IAEIC,EAFKX,EAAOY,MAEG,EACfC,EAFKb,EAAOc,OAEG,EACfC,EAAkD,GAA7BC,KAAKC,IAAIN,EAASE,GAEvCK,GAAqB,GAAhBF,KAAKG,SAAiB,IAAQJ,EACnCK,EAAQJ,KAAKG,SAAWH,KAAKK,GAAK,EAEtCX,EAAMY,EAAIJ,EAAIF,KAAKO,IAAIH,GAAST,EAChCD,EAAMc,EAAIN,EAAIF,KAAKS,IAAIL,GAASP,EAChCH,EAAMgB,MAAQhB,EAAMY,EACpBZ,EAAMiB,MAAQjB,EAAMc,GAhBpBI,0BAmBD,SAAmClB,EAAOmB,EAAMC,GAC/C,IAAIC,EAAIC,EAER,GAAKtB,EAAMuB,eAAe,MAKnB,CACN,IAAIC,EAAcxB,EAAMgB,MAAQhB,EAAMY,EAClCa,EAAczB,EAAMiB,MAAQjB,EAAMc,EAClCY,EAASF,EAAclB,KAAKqB,IAAIH,GAAexB,EAAM4B,wBACrDC,EAASJ,EAAcnB,KAAKqB,IAAIF,GAAezB,EAAM8B,wBACzDT,EAAKrB,EAAMqB,GAAKK,EAChBJ,EAAKtB,EAAMsB,GAAKO,OAVhBR,EAAKf,KAAKG,UAAYW,EAAOD,GAAQA,EACrCG,EAAKhB,KAAKG,UAAYW,EAAOD,GAAQA,EACrCnB,EAAM4B,wBAA0B,KAAOtB,KAAKG,SAAW,KACvDT,EAAM8B,wBAA0B,KAAOxB,KAAKG,SAAW,KAUxDT,EAAMqB,GAAKA,EACXrB,EAAMsB,GAAKA,KAKZ3C,OAAOoD,iBAAiB,SAAU,WACjC/C,EAAWgD,gCAGZnD","file":"index.min.js","sourcesContent":["(function (buildWhatWeWant) {\n\tbuildWhatWeWant(window.wulechuanCanvasPointsAndConnections);\n})(function buildWhatWeWant(wulechuanCanvasPointsAndConnections) {\n\tvar shoudSlowDownForTesting = false;\n\tvar frameRate = 30;\n\tvar particleCounts = 80;\n\tif (shoudSlowDownForTesting) {\n\t\tframeRate = 1;\n\t\tparticleCounts = 2; // must greater than 1, otherwise no connection is needed.\n\t}\n\n\n\n\n\n\n\n\n\tvar drawnFramesCount = 0;\n\tfunction draw() {\n\t\tif (shoudSlowDownForTesting && drawnFramesCount>2) {\n\t\t\treturn;\n\t\t}\n\t\tcontroller.drawFrame(new Date().getTime() / 1000);\n\t\trequestAnimationFrame(draw);\n\t\tdrawnFramesCount++;\n\t}\n\n\n\n\tvar canvas = document.querySelector('#test-canvas');\n\t// var requestAnimationFrame = function (func) {\n\t// \twindow.setTimeout(func, 1000 / frameRate);\n\t// };\n\n\n\n\tvar controller = new wulechuanCanvasPointsAndConnections({\n\t\tcanvas: canvas,\n\t\tmaxDistanceToMakeConnection: 60,\n\t\tlineWidthDrawingThreshold: 0.25,\n\t\tpointsCount: particleCounts,\n\t\tthickestLineWidth: 2,\n\t\tpointColorRGB: '51, 87, 256',\n\t\tlineColorRGB: '64, 192, 219',\n\t\t// speedMin: 6,\n\t\t// speedMax: 50,\n\t\tgenerateOnePoint: generateOnePointAroundACircle,\n\t\tupdateOnePointOnIteration: updateOnePointOnIteration\n\t});\n\n\tfunction generateOnePointAroundACircle(point) {\n\t\tvar cw = canvas.width;\n\t\tvar ch = canvas.height;\n\t\tvar centerX = cw / 2;\n\t\tvar centerY = ch / 2;\n\t\tvar distributionRadius = Math.min(centerX, centerY) * 0.6;\n\n\t\tvar r = (Math.random() * 0.6 + 0.7 ) * distributionRadius;\n\t\tvar theta = Math.random() * Math.PI * 2;\n\n\t\tpoint.x = r * Math.sin(theta) + centerX;\n\t\tpoint.y = r * Math.cos(theta) + centerY;\n\t\tpoint.coreX = point.x;\n\t\tpoint.coreY = point.y;\n\t}\n\n\tfunction updateOnePointOnIteration(point, vmin, vmax) {\n\t\tvar vx, vy;\n\n\t\tif (!point.hasOwnProperty('vx')) {\n\t\t\tvx = Math.random() * (vmax - vmin) + vmin;\n\t\t\tvy = Math.random() * (vmax - vmin) + vmin;\n\t\t\tpoint.forceRatioOverDistanceX = 1200 * Math.random() + 1200;\n\t\t\tpoint.forceRatioOverDistanceY = 1200 * Math.random() + 1200;\n\t\t} else {\n\t\t\tvar distToCoreX = point.coreX - point.x;\n\t\t\tvar distToCoreY = point.coreY - point.y;\n\t\t\tvar forceX = distToCoreX * Math.abs(distToCoreX) / point.forceRatioOverDistanceX;\n\t\t\tvar forceY = distToCoreY * Math.abs(distToCoreY) / point.forceRatioOverDistanceY;\n\t\t\tvx = point.vx + forceX;\n\t\t\tvy = point.vy + forceY;\n\t\t}\n\n\t\tpoint.vx = vx;\n\t\tpoint.vy = vy;\n\t\t// point.speed = Math.sqrt(vx * vx + vy * vy);\n\t\t// point.direction = Math.atan2(vy, vx);\n\t}\n\n\twindow.addEventListener('resize', function () {\n\t\tcontroller.updateCanvasPositionAndSize();\n\t});\n\n\tdraw();\n});\n"]}